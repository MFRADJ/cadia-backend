# main.py
from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from contextlib import asynccontextmanager

from app.api.routes import auth, users
from app.api import deps
from app.core.config import settings
from app.db.session import engine, Base

# Cr√©ation des tables avec un gestionnaire de contexte
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Cr√©ation des tables au d√©marrage
    Base.metadata.create_all(bind=engine)
    print("üöÄ Base de donn√©es initialis√©e!")
    yield
    # Nettoyage √† l'arr√™t (optionnel)
    print("üõë Application arr√™t√©e!")

app = FastAPI(
    title=settings.PROJECT_NAME,
    description="API pour le syst√®me d'authentification CADIA",
    version="1.0.0",
    openapi_url=f"{settings.API_V1_STR}/openapi.json",
    lifespan=lifespan,  # Utilisation du gestionnaire de contexte
)

# Configuration des CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.get_cors_origins(),
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Point d'entr√©e API
@app.get("/")
async def root():
    return {"message": "Bienvenue sur l'API CADIA"}

# Endpoint de v√©rification de l'√©tat de sant√©
@app.get("/health")
async def health_check():
    return {"status": "ok", "api_version": "1.0.0"}

# V√©rification de la connexion √† la base de donn√©es
@app.get("/db-test")
async def test_db(db: Session = Depends(deps.get_db)):
    try:
        # Ex√©cuter une requ√™te simple pour tester la connexion
        db.execute("SELECT 1")
        return {"status": "Base de donn√©es connect√©e avec succ√®s"}
    except Exception as e:
        return {"status": "Erreur de connexion √† la base de donn√©es", "error": str(e)}

# Inclusion des routeurs
app.include_router(
    auth.router,
    prefix=f"{settings.API_V1_STR}/auth",
    tags=["authentification"]
)

app.include_router(
    users.router,
    prefix=f"{settings.API_V1_STR}/users",
    tags=["utilisateurs"]
)

# Point d'entr√©e pour ex√©cuter l'application avec Uvicorn
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)